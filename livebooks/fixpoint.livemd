# Fixpoint

## Introduction

Fixpoint is a [Constraint Programming](https://en.wikipedia.org/wiki/Constraint_programming) solver. Constraint programming is widely used for solving hard combinatorial problems, such as planning, scheduling, production and resource optimization, and more.

Constraint programming is declarative. That is, instead of coding the solution to the problem, the programmer formulates it as a [**constraint satisfaction**](https://en.wikipedia.org/wiki/Constraint_satisfaction_problem) problem. This is done by putting together a set of constraints (usually called a "model") that describes the problem and then feeding it to CP solver. The solver then either produces solutions that satisfy the model, if any; otherwise, the solver reports the problem unsolvable in terms of the model.

To make it more concrete, we will solve some puzzles using Fixpoint.

## Install Fixpoint

```elixir
Mix.install([:fixpoint])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Solve Sudoku

```elixir
alias CPSolver.Examples.Sudoku
puzzles = Sudoku.puzzles()
IO.puts("We will solve this one:")
Sudoku.print_grid(puzzles.hard9x9) |> IO.puts()
```

<!-- livebook:{"output":true} -->

```
We will solve this one:

+-------+-------+-------+
| 4 . . | . 3 9 | . 2 . | 
| . 5 6 | . . . | . . . | 
| . . . | . . . | 6 . 4 | 
+-------+-------+-------+
| . . . | . . . | 9 . . | 
| 5 . . | 1 . . | 2 . . | 
| . 9 . | . 2 7 | . 3 . | 
+-------+-------+-------+
| . 3 7 | . . . | . . . | 
| . . . | . . . | 8 . 6 | 
| 9 . 8 | . 1 . | . . . | 
+-------+-------+-------+

```

<!-- livebook:{"output":true} -->

```
:ok
```

Solve it!

```elixir
Sudoku.solve_and_print(puzzles.hard9x9)
```

<!-- livebook:{"output":true} -->

```
Sudoku:

+-------+-------+-------+
| 4 . . | . 3 9 | . 2 . | 
| . 5 6 | . . . | . . . | 
| . . . | . . . | 6 . 4 | 
+-------+-------+-------+
| . . . | . . . | 9 . . | 
| 5 . . | 1 . . | 2 . . | 
| . 9 . | . 2 7 | . 3 . | 
+-------+-------+-------+
| . 3 7 | . . . | . . . | 
| . . . | . . . | 8 . 6 | 
| 9 . 8 | . 1 . | . . . | 
+-------+-------+-------+


+-------+-------+-------+
| 4 8 1 | 6 3 9 | 7 2 5 | 
| 7 5 6 | 4 8 2 | 1 9 3 | 
| 3 2 9 | 7 5 1 | 6 8 4 | 
+-------+-------+-------+
| 8 1 2 | 3 4 5 | 9 6 7 | 
| 5 7 3 | 1 9 6 | 2 4 8 | 
| 6 9 4 | 8 2 7 | 5 3 1 | 
+-------+-------+-------+
| 1 3 7 | 2 6 8 | 4 5 9 | 
| 2 4 5 | 9 7 3 | 8 1 6 | 
| 9 6 8 | 5 1 4 | 3 7 2 | 
+-------+-------+-------+


15:55:39.876 [notice] Solution checked!

```

<!-- livebook:{"output":true} -->

```
{:ok, #PID<0.215.0>}
```

## N-Queens

The n-queens problem is about finding how many different ways queens can be placed on a chessboard so that none attack each other.

<!-- livebook:{"break_markdown":true} -->

Let's solve 8-queens

```elixir
alias CPSolver.Examples.Queens
{:ok, solver} = Queens.solve_and_print(8)
```

<!-- livebook:{"output":true} -->

```

. ♕ . . . . . .
. . . ♕ . . . .
. . . . . ♕ . .
. . . . . . . ♕
. . ♕ . . . . .
♕ . . . . . . .
. . . . . . ♕ .
. . . . ♕ . . .


15:55:49.529 [notice] Solution checked!

```

<!-- livebook:{"output":true} -->

```
{:ok, #PID<0.33413.0>}
```

## Reindeers

Santa always leaves plans for his elves to determine the order in which the
  reindeer will pull his sleigh. This year, for the European leg of his
  journey, his elves are working to the following schedule, which will form a
  single line of nine reindeer.

Here are the rules:

```
Comet behind Rudolph, Prancer and Cupid
Blitzen behind Cupid
Blitzen in front of Donder, Vixen and Dancer
Cupid in front of Comet, Blitzen and Vixen
Donder behind Vixen, Dasher and Prancer
Rudolph behind Prancer
Rudolph in front of Donder, Dancer and Dasher
Vixen in front of Dancer and Comet
Dancer behind Donder, Rudolph and Blitzen
Prancer in front of Cupid, Donder and Blitzen
Dasher behind Prancer
Dasher in front of Vixen, Dancer and Blitzen
Donder behind Comet and Cupid
Cupid in front of Rudolph and Dancer
Vixen behind Rudolph, Prancer and Dasher.
```

Try to solve it by hand first!

<!-- livebook:{"break_markdown":true} -->

These rules are encoded as constraints [here](https://github.com/bokner/fixpoint/blob/main/lib/examples/reindeers.ex#L52-L65). The implementation of `behind/2` and `in_front_of/2` uses a universal `LessOrEqual` constraint.

<!-- livebook:{"force_markdown":true} -->

```elixir
  defp behind(reindeer, list) do
    Enum.map(list, fn r -> LessOrEqual.new(reindeer, r, -1) end)
  end

  defp in_front_of(reindeer, list) do
    Enum.map(list, fn r -> LessOrEqual.new(r, reindeer, -1) end)
  end

```

So the encoding of the rules does not require any programming except wiring rules to the constraint implementations.

<!-- livebook:{"break_markdown":true} -->

Let's solve it now:

```elixir
alias CPSolver.Examples.Reindeers
Reindeers.solve()
```

<!-- livebook:{"output":true} -->

```
{:ok, #PID<0.48292.0>}
```

<!-- livebook:{"output":true} -->

```
Dancer -> Donder -> Comet -> Vixen -> Blitzen -> Dasher -> Rudolph -> Cupid -> Prancer
```
